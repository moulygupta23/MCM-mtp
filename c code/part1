 this->w_size = n;
        // cout<<"w_size = "<<w_size<<endl;
        this->w = new double[w_size];
        // this->w0 = 0;
        this->alpha = new double[m];
        this->beta = new double[m];
        this->m=m;
        this->c1=1.0;
        this->c2=1.0;

li active=m;
        li i,n;

        int itr=0;

        double *qii = new double[m];

        bool converge=false;
        clock_t begin, end;
        double time_spent;

        double maxgaold=inf,maxgbold=inf;
        double mingaold=-inf,mingbold=-inf;
        double maxga,maxgb,minga,mingb;
        double pga,pgb;

        double d;
        begin = clock();
        //li* seq=initialzation(tr,qii,d);
        //double inf = std::numeric_limits<double>::infinity();
        if(type==L1LOSS)
            d=0;
        else
            d=0.5/c1;

        for(li i=0;i<w_size;i++)
            w[i]=0;
        // w0=0;

        li* seq= new li[m];  
        li n;
        // qii is sum of sqare of each data point(sum of sqaure of each feature)
        // qii=sum(x(i,:).^2,2);
        // w=(y.*(beta-alpha))'*x;
        for (li i=0;i<m;i++){
            double Q=d;
            beta[i]=0;
            alpha[i]=1.0/m;
            
            for(li j=0;tr.ind[i][j]!=-1;j++){
                double x=tr.x[i][j];
                li p = tr.ind[i][j];
                w[p] += (tr.y[i]*(beta[i]-alpha[i])*x);
                // cout<<tr.y[i]*(beta[i]-alpha[i])<<" "<<w[p]<<" "<<p<<"\n";
                
                Q+=(x*x);
                // cout<<x<<":"<<Q<<" ";
            }
            // cout<<endl;
            // w0+=(tr.y[k]*(beta[i]-alpha[i]));
            qii[i]=Q;
            // cout<<qii[i]<<" ";
            // cout<<"d="<<d<<" qii[i]="<<qii[i]<<endl;
            seq[i]=tr.perm[i];
            // cout<<qii[i]<<" "<<beta[i]<<" "<<alpha[i]<<endl;
        }
        // cout<<endl<<endl;
        // printModel(tr.m,tr.n);
        // int u;
        // cin>>u;
        // cout<<"w = ";
        // for(int i=0;i<w_size;i++)
        //     cout<<w[i]<<" ";
        // cout<<endl;
        cout<<"initialzation done\n";
        return seq;
        double dela,delb,Ga,Gb;
        double betaold,alphaold;
        
        while(itr < MAXITR){

            maxga=-inf,maxgb=-inf;
            minga=inf,mingb=inf;
            // random_shuffle(&seq[0], &seq[active]);

            for(li k=0;k<active;k++){
                i=seq[k];
                int yi=tr.y[i];

                double *xi=tr.x[i];
                li *index=tr.ind[i];
                
                Gb=0;
                for(li j=0;index[j]!=-1;j++)
                    Gb += (xi[j]*w[index[j]]);
                Gb = yi*Gb - 1 + d*beta[i];

                Ga = lambda - Gb - 1 + d*(beta[i]+alpha[i]);
                
                // cout<<Ga<<" "<<Gb<<" ";
                pga=0,pgb=0;
                delb=0,dela=0;
                
                if(alpha[i]==0){
                    
                    if(Ga > maxgaold){
                        active--;
                        swap(seq,k,active);
                        // cout<<i<<" removed from alpha\n";
                        k--;
                        continue;
                    }
                    else if(Ga < 0)
                        pga=Ga;
                } 
                else if(alpha[i] == c2){
                    
                    if(Ga < mingaold){
                        active--;
                        swap(seq,k,active);
                        // cout<<i<<" removed from alpha\n";
                        k--;
                        continue;
                    }
                    else if(Ga > 0)
                        pga=Ga;
                    
                }  
                else
                    pga = Ga;

                if(beta[i] == 0){
                    
                    if(Gb > maxgbold){
                        active--;
                        swap(seq,k,active);
                        // cout<<i<<" removed from beta\n";
                        k--;
                        continue;
                    }
                    else if(Gb < 0)
                        pgb=Gb;
                } 
                else if(beta[i] == c1){
                    
                    if(Gb < mingbold){
                        active--;
                        swap(seq,k,active);
                        // cout<<i<<" removed from beta\n";
                        k--;
                        continue;
                    }
                    else if(Gb > 0)
                        pgb=Gb;
                } 
                else
                    pgb=Gb;

                if(fabs(pga) > 1e-12){
                    alphaold = alpha[i];
                    alpha[i] = min(max((alpha[i] - Ga/qii[i]),0.0),c2);
                    dela = yi*(alpha[i]-alphaold);
                    // cout<<" a= "<<alpha[i];
                }

                if(fabs(pgb) > 1e-12){
                    betaold = beta[i];
                    beta[i] = min(max((beta[i]-Gb/qii[i]),0.0),c1);
                    delb = yi*(beta[i]-betaold);
                    // cout<<" b= "<<beta[i];
                }

                if(fabs(pga) > 1e-12 || fabs(pgb) > 1e-12){

                    for(li j=0;index[j]!=-1;j++){
                        w[index[j]]+=((delb-dela)*xi[j]);
                        // cout<<w[index[j]]<<" ";
                    }
                    // w0+=(delb-dela);
                }
                
                // cout<<" "<<alpha[i]<<" "<<beta[i]<<endl;

                maxga=max(pga,maxga);
                maxgb=max(pgb,maxgb);

                minga=min(pga,minga);
                mingb=min(pgb,mingb);

            }
            // int tyui;
            // cin>>tyui;
            itr++;
            if(itr % 10 == 0){
                cout<<".";
            //      cout<<endl;
            // for(int j=0;j<15;j++){
            //     cout<<alpha[j]<<" "<<beta[j]<<endl;
            // }
            
            }
            fflush(stdout);
            // cout<<",";
            // cout<<endl;
            // cout<<itr<<endl;
            // cout<<EPS;
            if((maxga-minga <= EPS && maxgb-mingb <= EPS)){
                if(active==m){
                    cout<<"\ngetting out "<<active<<" "<<itr<<endl;
                    break;
                }
                else{
                    cout<<"*";
                    maxgaold=inf,maxgbold=inf;
                    mingaold=-inf,mingbold=-inf;
                    active=m;
                    continue;
                }

            }

            if(maxga<=0)
                maxgaold=inf;
            else
                maxgaold=maxga;

            if(maxgb<=0)
                maxgbold=inf;
            else
                maxgbold=maxgb;

            if(minga>=0)
                mingaold=-inf;
            else
                mingaold=minga;

            if(mingb>=0)
                mingbold=-inf;
            else
                mingbold=mingb;
            
        }
        if(itr >= MAXITR)
            cout<<"\nmax iteration reached\n";
        end = clock();
        nsv=0;
        // ofstream ofs("dcd1.out");
        double sumalpha=0;
        for(li i=0;i<m;i++){
            sumalpha+=alpha[i];
            if(beta[i]-alpha[i]!=0){
                nsv++;
                cout<<alpha[i]<<" "<<beta[i]<<endl;
            }
        }

        time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
        cout<<"training complete\n\ntime for training : "<<time_spent<<"sec"<<endl;
        
        cout<<"sum of alphas="<<sumalpha<<endl<<"nummber of support vector="<<nsv<<endl; 
        cout<<"lambda="<<lambda<<endl; 
 
       delete [] qii;
       delete [] seq;
       return time_spent;
       delete [] w;
        delete [] alpha;
        delete [] beta;